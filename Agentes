import openai
import matplotlib.pyplot as plt  
openai.api_key = Chave

class Agente:
    def __init__(self, nome, objetivo, habilidades, ferramentas):
        self.nome = nome
        self.objetivo = objetivo
        self.habilidades = habilidades
        self.ferramentas = ferramentas

class Copywriter(Agente):
    def __init__(self):
        super().__init__(
            nome="Clara Textos",
            objetivo="Criar conteúdos legais e persuasivos para sites, blogs, redes sociais e e-mails.",
            habilidades=["Escrita criativa", "SEO", "Pesquisa de mercado", "Adaptação de estilo"],
            ferramentas=["Google Docs", "Grammarly", "SEMrush", "Ahrefs"]
        )

    def criar_conteudo(self, topico):
        print(f"{self.nome} está escrevendo sobre: {topico}")
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Você é um copywriter talentoso."},
                {"role": "user", "content": f"Escreva um conteúdo interessante sobre {topico}."}
            ]
        )
        conteudo = response['choices'][0]['message']['content']
        with open("conteudo.txt", "w") as file:
            file.write(conteudo)
        print(f"Conteúdo salvo em 'conteudo.txt'.")

class Designer(Agente):
    def __init__(self):
        super().__init__(
            nome="Diego Artes",
            objetivo="Fazer designs legais para materiais digitais e impressos.",
            habilidades=["Design gráfico", "Ferramentas de design", "UX/UI", "Conhecimento de cores e tipografia"],
            ferramentas=["Adobe Creative Suite", "Figma", "Sketch", "Canva"]
        )

    def criar_grafico(self, dados):
        print(f"{self.nome} está criando um gráfico.")
        plt.plot(dados)
        plt.title("Gráfico de Exemplo")
        plt.xlabel("Eixo X")
        plt.ylabel("Eixo Y")
        plt.savefig("grafico.png")
        plt.show()
        print(f"Gráfico salvo como 'grafico.png'.")

    def sugerir_design(self, projeto):
        print(f"{self.nome} está sugerindo um design para: {projeto}")
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Você é um designer gráfico talentoso."},
                {"role": "user", "content": f"Descreva um design legal para {projeto}."}
            ]
        )
        sugestao = response['choices'][0]['message']['content']
        print(f"Sugestão de design: {sugestao}")

class EspecialistaMarketing(Agente):
    def __init__(self):
        super().__init__(
            nome="Mariana Campanhas",
            objetivo="Planejar estratégias de marketing para aumentar a visibilidade da marca.",
            habilidades=["Planejamento de marketing", "Gestão de campanhas", "Análise de dados", "Marketing de conteúdo"],
            ferramentas=["Google Analytics", "Google Ads", "Facebook Ads Manager", "HubSpot"]
        )

    def analisar_dados(self):
        print(f"{self.nome} está analisando dados.")
        dados = [10, 20, 30, 40, 50]
        media = sum(dados) / len(dados)
        print(f"A média dos dados é: {media}")

    def planejar_campanha(self, campanha):
        print(f"{self.nome} está planejando a campanha: {campanha}")
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Você é um especialista em marketing."},
                {"role": "user", "content": f"Planeje uma campanha de marketing para {campanha}."}
            ]
        )
        plano = response['choices'][0]['message']['content']
        print(f"Plano de campanha: {plano}")

# Criando os agentes
copywriter = Copywriter()
designer = Designer()
especialista_marketing = EspecialistaMarketing()

# Função para mostrar informações dos agentes
def mostrar_agente(agente):
    print(f"Nome: {agente.nome}")
    print(f"Objetivo: {agente.objetivo}")
    print("Habilidades:")
    for habilidade in agente.habilidades:
        print(f" - {habilidade}")
    print("Ferramentas:")
    for ferramenta in agente.ferramentas:
        print(f" - {ferramenta}")
    print("\n")

# Mostrando informações dos agentes
print("Informações dos Agentes da CrewIA:\n")
mostrar_agente(copywriter)
mostrar_agente(designer)
mostrar_agente(especialista_marketing)

# Executando funções dos agentes
copywriter.criar_conteudo("melhores práticas de SEO 2024")
designer.criar_grafico([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
designer.sugerir_design("novo logotipo da empresa")
especialista_marketing.analisar_dados()
especialista_marketing.planejar_campanha("lançamento de produto")
